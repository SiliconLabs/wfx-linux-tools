# Copyright (c) 2018, Silicon Laboratories
# See license terms contained in COPYING file
#
# This file is to be sourced by other wfx scripts

# Set SILABS_ROOT if not already done
: ${SILABS_ROOT:=/home/pi/siliconlabs}

# github clone directories
GITHUB_TOOLS_PATH="$SILABS_ROOT/wfx-linux-tools"
GITHUB_TOOLS_INTERNAL_PATH="$GITHUB_TOOLS_PATH/internal"
GITHUB_DRIVER_PATH="$SILABS_ROOT/wfx-linux-driver"
GITHUB_FIRMWARE_PATH="$SILABS_ROOT/wfx-firmware"
GITHUB_PDS_PATH="$GITHUB_FIRMWARE_PATH/PDS"
GITHUB_PDS_PATH_NEW="$SILABS_ROOT/wfx-pds"
GITHUB_CONF_PATH="$GITHUB_TOOLS_PATH/demos/conf"

# Colors used for debug messages
NO="\e[0m"
INV="\e[7m"
DIM="\e[2m"
DEF="\e[39m"
WHITE="\e[97m"
GREY="\e[90m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
LBLUE="\e[94m"
LRED="\e[91m"
LGREEN="\e[92m"
LYELLOW="\e[93m"
LBLUE="\e[94m"

check_root()
{
    if [ $(id -u) != 0 ]; then
        echo "ERROR: please run this script as root (running 'sudo $(basename $0)' should work)" >&2
        exit 1
    fi
}

check_not_root()
{
    if [ $(id -u) == 0 ]; then
        echo "ERROR: running this script as root is not recommended" >&2
        exit 1
    fi
}

# Allow aliases use in scripts
shopt -s expand_aliases

# To be called at the start of tools needing to be run as root
alias run_as_root='[ $(id -u) = 0 ] || exec sudo $0 "$@"'

check_rpi()
{
    if ! grep -q 'NAME="Raspbian GNU/Linux"' /etc/os-release; then
        echo "ERROR: you must run this script from a Raspberry" >&2
        exit 1
    fi
}

check_hat()
{
    if [ ! -d /proc/device-tree/hat ]; then
        if  grep -q '^dtparam=i2c_vc=on' /boot/config.txt; then
            echo "ERROR: cannot identify board, /proc/device-tree/hat/ does not exist. Empty eeprom?" >&2
        else
            echo "ERROR: cannot identify board, 'dtparam=i2c_vc=on' is not present in /boot/config.txt." >&2
        fi
        exit 1
    fi
}

# Kill process if need be and check that it is not restarted
kill_check()
{
    if killall -q "$@"; then
        # At least one process was killed, checking for restart
        sleep 2
        if pidof "$@"; then
            echo "ERROR: at least one of the process ($@) is still running" >&2
            exit 1
        fi
    fi
}

check_interface()
{
    if ! ip link show "$1" &> /dev/null; then
        echo "ERROR: interface $1 not detected" >&2
        [ "$(basename $0)" != wfx_driver_reload ] && echo "Did you run wfx_driver_reload?" >&2
        exit 1
    fi
}

check_working_clean()
{
    REPO_PATH=$1
    STATUS=$(git -C $REPO_PATH status --porcelain --untracked-files=no)
    if ! [ -z "$STATUS" ]; then
        echo "ERROR: the following files where modified in the directory $REPO_PATH"
        echo "$STATUS"
        echo "To DISCARD modifications, run \"git reset --hard\" in this directory"
        echo "To SAVE modifications, run \"git stash\" in this directory"
        exit 1
    fi
}

# Uncomment a given line or add it
enable_line()
{
    FILE=$1
    LINE=$2
    if grep -q "^#*\ *$LINE" "$FILE"; then
	comment="^#\ *"
	sed -i -re "/${comment}$LINE/ s/${comment}//" "$FILE"
    else
	echo "$LINE" >> "$FILE"
    fi
}

# Comment out a given line (must match start of line)
disable_line()
{
    FILE=$1
    LINE=$2
    sed -i -re "/^$LINE/ s/^#*/#/" "$FILE"
}

error()
{
    if [ -z "${1:-}" ];then
        echo -e "ERROR\n$USAGE" >&2
    else
        echo -e "ERROR: $1\n\n$USAGE" >&2
    fi
    exit 1
}
