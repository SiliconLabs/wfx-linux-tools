#!/bin/bash
# Copyright (c) 2019, Silicon Laboratories
# See license terms contained in COPYING file

USAGE="Usage: $(basename $0) OPTION

  --help                display this message
  send_msg              write hif data to debugfs
  read_agent_version    return current agent version
  log_message           add message to dmesg
"

VERSION="1.1.0"

# Always run as root
[ $(id -u) = 0 ] || exec sudo $0 "$@"

hif_send_msg()
{
    # hif_send_msg sends a request payload (received as a text string)
    # to the firmware via the debugfs 'wfx/send_hif_msg' file,
    # and retrieves the confirmation message's status code (0 means 'SUCCESS')

    # Filling HIF_INPUT with proper PHY number

    PHY=$(iw dev | grep phy | sed -e 's/#//')
    if [ ! -e "/sys/kernel/debug/ieee80211/${PHY}/wfx/send_hif_msg" ]; then
	if [ ! -e "/sys/kernel/debug/ieee80211/${PHY}/wfx/status" ]; then
	    echo "ERROR: wfx driver is not loaded..."
	else
	    echo "ERROR: wfx driver does not support send_hif_msg, please update it..."
	fi
	exit 1
    fi

    HIF_INPUT=$(ls /sys/kernel/debug/ieee80211/${PHY}/wfx/send_hif_msg)
    #set -ex

    # Opening file descriptor # 3 for reading and writing
    # NB: We can't use sub processes to write/read (such as 'res=$(...)')
    #  because these would lose the file descriptor
    # Writing and reading from this file MUST be done in the same process
    exec 3<>${HIF_INPUT}

    # Write to file descriptor # 3 (using tee to avoid having hex data interpreted by echo)
    echo -en "${1}" | tee >&3

    # Read from file descriptor and copy to temporary file
    #  (dd hex result can't be retrieved directly)
    #  route dd messages (sent to stderr) to /dev/null to avoid cluttering the traces
    dd count=1 <&3 > /tmp/hif_res 2> /dev/null

    # Retrieve HIF result: first 16 bits of confirmation message (2nd item on hexdump 1st line)
    status=0x$(hexdump /tmp/hif_res | grep ^0000000 | awk '{split($0,a," "); print a[2]}')

    # close fd # 3
    exec 3>&-

    # return status
    echo $((${status}))
}

case "$1" in
    --help)               echo "$USAGE" ;;
    read_agent_version)   echo "${VERSION}" ;;
    send_msg)             hif_send_msg "${2}" ;;
    log_message)          echo "${2}" | tee /dev/kmsg; echo "Done" ;;
    *)                    echo "ERROR: unknown $(basename $0) option $1" >&2
                          echo "$USAGE" >&2
                          exit 1
                          ;;
esac
